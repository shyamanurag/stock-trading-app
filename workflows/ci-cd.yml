name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  NODE_VERSION: 18
  GO_VERSION: 1.20
  RUST_VERSION: 1.70.0

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      should_deploy: ${{ steps.set-env.outputs.should_deploy }}
    steps:
      - name: Set environment variables
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  lint:
    name: Lint
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Lint frontend
        working-directory: ./frontend
        run: npm run lint
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: backend/go.sum
      
      - name: Lint Go code
        working-directory: ./backend
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run ./...
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
          override: true
      
      - name: Lint Rust code
        working-directory: ./rust-services
        run: |
          cargo clippy -- -D warnings
          cargo fmt -- --check

  test-frontend:
    name: Test Frontend
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: frontend/coverage

  test-backend:
    name: Test Backend
    needs: lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trading_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: backend/go.sum
      
      - name: Run Go tests
        working-directory: ./backend
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: trading_test
        run: go test -v -coverprofile=coverage.out ./...
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: backend/coverage.out

  test-rust:
    name: Test Rust Services
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust-services/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run Rust tests
        working-directory: ./rust-services
        run: cargo test
  
  test-cpp:
    name: Test C++ Components
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.25.x'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libboost-all-dev
      
      - name: Configure CMake
        working-directory: ./cpp-components
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release
      
      - name: Build
        working-directory: ./cpp-components
        run: cmake --build build
      
      - name: Test
        working-directory: ./cpp-components/build
        run: ctest --verbose

  e2e-tests:
    name: End-to-End Tests
    needs: [test-frontend, test-backend, test-rust, test-cpp]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trading_e2e
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: backend/go.sum
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
      
      - name: Start backend services
        working-directory: ./backend
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: trading_e2e
          JWT_SECRET: test-secret
          PORT: 8080
        run: |
          go build -o trading-api ./cmd/server
          ./trading-api &
      
      - name: Start Rust services
        working-directory: ./rust-services
        run: |
          cargo build --release
          ./target/release/market-data-service &
      
      - name: Build and start frontend
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8080
        run: |
          npm run build
          npm run start &
      
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          sleep 10
      
      - name: Run Cypress tests
        working-directory: ./frontend
        run: npm run cypress:run
      
      - name: Upload Cypress artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-artifacts
          path: |
            frontend/cypress/videos
            frontend/cypress/screenshots

  build-docker-images:
    name: Build Docker Images
    needs: [e2e-tests, setup]
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' || 
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main')
    outputs:
      frontend_image: ${{ steps.image-tags.outputs.frontend_image }}
      backend_image: ${{ steps.image-tags.outputs.backend_image }}
      rust_image: ${{ steps.image-tags.outputs.rust_image }}
      cpp_image: ${{ steps.image-tags.outputs.cpp_image }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate image tags
        id: image-tags
        run: |
          # Generate a unique tag based on environment and commit SHA
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)
          ENV=${{ needs.setup.outputs.environment }}
          
          # Generate image names
          FRONTEND_IMAGE="${{ env.REGISTRY }}/${{ github.repository }}/frontend:${ENV}-${SHA_SHORT}"
          BACKEND_IMAGE="${{ env.REGISTRY }}/${{ github.repository }}/backend:${ENV}-${SHA_SHORT}"
          RUST_IMAGE="${{ env.REGISTRY }}/${{ github.repository }}/rust-services:${ENV}-${SHA_SHORT}"
          CPP_IMAGE="${{ env.REGISTRY }}/${{ github.repository }}/cpp-components:${ENV}-${SHA_SHORT}"
          
          echo "frontend_image=${FRONTEND_IMAGE}" >> $GITHUB_OUTPUT
          echo "backend_image=${BACKEND_IMAGE}" >> $GITHUB_OUTPUT
          echo "rust_image=${RUST_IMAGE}" >> $GITHUB_OUTPUT
          echo "cpp_image=${CPP_IMAGE}" >> $GITHUB_OUTPUT
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.image-tags.outputs.frontend_image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=${{ needs.setup.outputs.environment }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ steps.image-tags.outputs.backend_image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=${{ needs.setup.outputs.environment }}
      
      - name: Build and push Rust services image
        uses: docker/build-push-action@v4
        with:
          context: ./rust-services
          push: true
          tags: ${{ steps.image-tags.outputs.rust_image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=${{ needs.setup.outputs.environment }}
      
      - name: Build and push C++ components image
        uses: docker/build-push-action@v4
        with:
          context: ./cpp-components
          push: true
          tags: ${{ steps.image-tags.outputs.cpp_image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=${{ needs.setup.outputs.environment }}

  deploy:
    name: Deploy
    needs: [build-docker-images, setup]
    runs-on: ubuntu-latest
    if: needs.setup.outputs.should_deploy == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Initialize Terraform
        working-directory: ./infrastructure/terraform
        run: terraform init
      
      - name: Terraform Plan
        working-directory: ./infrastructure/terraform
        env:
          TF_VAR_environment: ${{ needs.setup.outputs.environment }}
          TF_VAR_frontend_image: ${{ needs.build-docker-images.outputs.frontend_image }}
          TF_VAR_backend_image: ${{ needs.build-docker-images.outputs.backend_image }}
          TF_VAR_rust_image: ${{ needs.build-docker-images.outputs.rust_image }}
          TF_VAR_cpp_image: ${{ needs.build-docker-images.outputs.cpp_image }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
        run: terraform plan -out=tfplan
      
      - name: Terraform Apply
        working-directory: ./infrastructure/terraform
        if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/develop'
        env:
          TF_VAR_environment: ${{ needs.setup.outputs.environment }}
          TF_VAR_frontend_image: ${{ needs.build-docker-images.outputs.frontend_image }}
          TF_VAR_backend_image: ${{ needs.build-docker-images.outputs.backend_image }}
          TF_VAR_rust_image: ${{ needs.build-docker-images.outputs.rust_image }}
          TF_VAR_cpp_image: ${{ needs.build-docker-images.outputs.cpp_image }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
        run: terraform apply -auto-approve tfplan
      
      - name: Run Database Migrations
        if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/develop'
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          # Install the migration tool
          go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
          
          # Run migrations
          migrate -path ./backend/migrations -database "postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=require" up
      
      - name: Verify Deployment
        if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/develop'
        run: |
          # Wait for services to be available
          echo "Waiting for services to be deployed..."
          sleep 60
          
          # Make a request to the health endpoint
          HEALTH_URL=${{ secrets.API_BASE_URL }}/health
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL)
          
          if [ "$RESPONSE" -eq 200 ]; then
            echo "Deployment verified successfully!"
          else
            echo "Deployment verification failed with status code: $RESPONSE"
            exit 1
          fi
      
      - name: Notify Slack on Success
        if: success() && (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/develop')
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "✅ Successfully deployed to ${{ needs.setup.outputs.environment }} environment!"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify Slack on Failure
        if: failure() && (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/develop')
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "❌ Deployment to ${{ needs.setup.outputs.environment }} environment failed!"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
